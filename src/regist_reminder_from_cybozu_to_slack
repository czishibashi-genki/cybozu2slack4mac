#!/bin/bash
#cronで実行するため、言語の環境変数をexport
export LANG="ja_JP.UTF-8"

#project_root_dir
prd=$(cd $(dirname $0)/.. && pwd)

#このshellの絶対パス
this=$prd/src/${0##*/}

#logファイル
register_log=$prd/log/register.log
register_error_log=$prd/log/register_err.log
slack_log=$prd/log/slack.log
date +"[%R %F]" | tee -a $register_log >>$register_error_log 

#slackのコマンドのpath
ss=$prd/src/send2slack

#cybozuのコマンドのpath
cybozu=$prd/src/cybozu

#設定ファイルから設定を読み込む
read_env() {
  while read line; do
    var_name=$(echo "$line" | awk -F= '{gsub(/^ +| +$/,"",$1); print $1}')
    var_value=$(echo "$line" | awk -F= '{gsub(/^ +| +$/,"",$2); print $2}')
    eval "${var_name:-_}='${var_value:-_}'"
    echo "${var_name:-_}='${var_value:-_}'"
  done < <(cat $prd/resource/env | grep -Ev "^ *#+|^ *$")
}

#第一フィールドの5分前の時刻を求める input 18:50 19:00 ... => output 18:45
get_minus_5min_datetime() {
  echo "$*" | cut -d" " -f1 | xargs -I__ date -j -v-5M -f %H:%M __ +"%R %D"
}

#atコマンドで実行するコマンドを求める
create_command_to_send_to_slack() {
   echo "$*" |\
     awk "{ 
       gsub(\"∆\", \":warning:\");
       print \"echo '\"\$0\"' | tee -a $slack_log | $ss -i'$icon' -c'$channel' -u'$slack_url' 2>>$slack_log\";
     }"
}

#次の日のreminderを登録するシェルをatコマンドのqueueに追加する
#atコマンドはsleep状態でも動くらしいのでcronではなくatコマンドで
regist_next() {
  case $(date +%w) in 
    5) next_day=$(date -v+3d +%D) ;;
    *) next_day=$(date -v+1d +%D) ;;
  esac
  echo "bash $this" | at 9:53 $next_day 2>>$register_error_log
}

main() {
  read_env 
  regist_next
  schedules=$($cybozu $account $password) && [ ! -z "$schedules" ] || exit 1

  paste \
      <(create_command_to_send_to_slack "$schedules") \
      <(get_minus_5min_datetime "$(echo "${schedules//-/ }" |\
          awk '
          $1 != "∆"{$0 = "_ "$0}
          {print}
          ' |\
          cut -d" " -f2- )"\
      ) |\
    awk -F"\t" '
      {
        command = "date +[%R_%D] >>'"$slack_log"'; "$1;
        print "echo \"", command, "\" | at ", $2
      }' |\
    tee -a $register_log |\
    bash 2>>$register_error_log
}

main
